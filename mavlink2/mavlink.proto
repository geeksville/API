// package com.doneshare.mavlink;

// option java_package = "com.droneshare.mavlink";

/*
For information on protocol buffer versioning see: https://developers.google.com/protocol-buffers/docs/overview
For information on protocol buffer wire encoding see: https://developers.google.com/protocol-buffers/docs/encoding

It is worth noting that protocol buffers can be self describing, so written tlogs etc... could include the full metadata needed to properly decode that version of protobufs
https://developers.google.com/protocol-buffers/docs/techniques.  Even without using this feature, the mapping of fields in protobufs to unique integers allows software components
to gracefully communicate with implementations that might be written to either newer or older versions of the protocol.
*/

// Test of the heartbeat msg
message Heartbeat {
	required uint32 typ = 1; // FIXME - could use a PB enum for many of these fields
        required uint32 autopilot = 2;
	required uint32 base_mode = 3;
	required uint32 custom_mode = 4;

	// One other benefit of protobufs: fields such as this are defined as uint32 for 'free' - because until values larger than 128 are needed even uint32s only need
	// one byte on the wire.
	required uint32 system_status = 5;

	// It is worth noting that mavlink_version may not be required in the heartbeat depending on how we do the protobuf encoding, because
	// defining new message types or adding/removing fields from old message types can be elegantly disambiguated based on the field identifier codes.
	required uint32 mavlink_version = 6;
}

enum FixType {
	None = 0;
	D2 = 2;
	D3 = 3;
	}

// Test of the gps pos msg
message GpsRawInt {
	required uint64 time_usec = 1;
        optional FixType fix_type = 2;
	optional sint32 lat = 3;
	optional sint32 lon = 4;
	optional sint32 alt = 5;
	optional sint32 eph = 6;
	optional sint32 epv = 7;
	optional sint32 vel = 8;
	optional sint32 cog = 9;
	optional uint32 satellites_visible = 10;
}

// Enums used to decode the super large envelope variant (not using a variant record is also an option but this made for an easy experiment similar 
// to how I've used protobufs in the past)
enum EnvelopeMsgCode {
	HeartbeatCode = 10;
	GpsRawIntCode = 11;
}

// Envelope to contain all the messages. At any time, ONLY 1 of the optional fields can be used.
message Envelope {
	// Note, I'm assuming - seq #, framing byte, length and CRC are encoded outside the land of protobufs. 

	required uint32 system_id = 1;
	required uint32 component_id = 2;

  	// Identifies which field is filled in.
  	required EnvelopeMsgCode type = 3;

	// Payloads
	optional Heartbeat heartbeat = 10;
	optional GpsRawInt gpsRawInt = 11;
}
